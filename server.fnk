# Frost Server API
# Not For Resale
# This Server Version Can Support 'AntiDOS.fnk' Script Package Via The Line: 'frostStart('ANTI-DOS-MODEL -abk 1500 --noThrottle');'
# All Updates Must Keep In Line For Frosty v1.2.6.2

# Supports
frost.forceInclude('AntiDOS.fnk');


# The Usual Frost Script API Needed For All Files Which Need Frost (Even Javascript)
# Javascript: frost.includes ({ ARGS });
# HTML: <script>frost.includes('server.fnk');</script>
# C++: frost.include = { ARGS };
frost.includes ({
    frostByte();
    frostEnd();
    frostEvent();
    frostClose();
    frostOpen();
    frostPort();
    frostJvm();
    frostStart();
    frostEval();
    frostTrigger();
    frostRequire();
    frostPrint();
    frostCommandApi();
    frostLineArgs();
    frost();
});

if (!frost()) {
    frostTrigger(frostByte());
} else if (frostEvent('frostByte()')) {
    frostJvm('print("This is how frosty works")');
} else {
    frostTrigger(frostJvm('exit'));
}

if (!frostByte()) {
    frostTrigger('eloc');
}

if (!frostEvent()) {
    if (!frostRequire()) {
        frostEval('frostByte(!frostEvent())');
    }
    frostTrigger('standups -f');
}

if (!frostCommandApi()) {
    if (!frostLineArgs()) {
        define(eventJar).frostLineArgs(event);
    }
}

frost.commandApi = ({
    frostLineArgs("frosty server.fnk --install package.fnk");
    frostLineArgs("frosty server.fnk --update package.fnk");
    frostLineArgs("frosty server.fnk --checkport 80,443,50,55");
    frostLineArgs("frosty server.fnk --sts '1' --stc '2' --stc '3' --channel '45'");
    frostPrint("Packages and server checks passes"); else frostPrint("Packages and server checks failed with error: 'e'");
    frostLineArgs("frosty server.fnk --runserver 1250K ||| 29860K ||| 38M");
    frostPrint("Server status: 'output' || Memory Usage: 'check-args :1250K/38M:'");
    frostLineArgs("frosty server.fnk --addNetUser worker1");
      worker1.frostLineArgs("frosty setworker -a worker1");
      worker1.frostLineArgs("frosty openthread -a worker1");
    frostPrint("Server status: 'output' || Memory Usage: 'check-args :1250K/38M:' || Worker: 'worker1.name(/SocksAPI/)'");
    frostPrint("Running server on 'worker1.port(/80/)'..");
    frostStart('frost-server -a ('/'mem'/')');
});

frost.scriptType('javascript') {
	var onError = frost.event('e');
	var onErrorName = frost.onError();
	if (onError == undefined) {
	    onError = frostEvent('e');
	},
	if (onErrorName == undefined) {
	    onErrorName == frost.onError();
	},
	for (onError(e).frostEvent('e')) {
	    import server;
	},
}.endScriptType();

frost.onError = ({
	frostEnd('event');
	frostPrint('e');
	if (!frost.onerror()) {
	    frostEnd();
	    frostStart();
	},
});

frost.scriptType('html') {
	"<b><u>Understatements</u></b>" +
	"- Allow Ports: <a href='server:ports-open'>Here</a>" +
	"- Disable Ports: <a href='server:ports-close'>Here</a>"
}.endScriptType();

@signaller;

>>char-meta --force="e2x" ++eval
<<"result"

>>try server.fnk --force="9045"
<<"result"

@noSignaller;

@ruby;

>>ruby -v
<<"must-return-version"

@noRuby;

@testCompile;

.//server.fnk >> server-test.exe
exec server-test.exe
eval char server-test.exe --all
exit server-test.exe
delete server-test.exe

.//package.fnk >> package-test.msi
exec package-test.msi --hidden
eval char package-test.msi
try (
    .//package-test.msi >> package.fnk
    exit compile eval --all
)
exit package-test.msi
delete package-test.msi

@notestCompile